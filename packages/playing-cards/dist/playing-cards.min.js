(()=>{var r=class a{static Name={0:"Joker",1:"Ace",2:"Two",3:"Three",4:"Four",5:"Five",6:"Six",7:"Seven",8:"Eight",9:"Nine",10:"Ten",11:"Jack",12:"Queen",13:"King"};static Suit={Club:"Club",Diamond:"Diamond",Heart:"Heart",None:"None",Spade:"Spade"};static Symbol={Club:"\u2663",Diamond:"\u2666",Heart:"\u2665",None:"\u2205",Spade:"\u2660"};static Value={Joker:0,Ace:1,Two:2,Three:3,Four:4,Five:5,Six:6,Seven:7,Eight:8,Nine:9,Ten:10,Jack:11,Queen:12,King:13};static random(t,s){s=s||Math.random;let e=Object.values(this.Suit).filter(i=>t||i!=="None"),o=Object.values(this.Value).filter(i=>t||i>0),l=e[Math.floor(s()*e.length)],u=o[Math.floor(s()*o.length)];return new a({suit:u===this.Value.Joker?this.Suit.None:l,value:u})}id=null;name=null;suit=null;symbol=null;value=null;constructor(t){t=t||{},this.suit=t.suit||this.constructor.Suit.Spade,this.value=t.value??this.constructor.Value.Ace,!t.suit&&this.value===this.constructor.Value.Joker&&(this.suit=this.constructor.Suit.None),this.name=t.name||this.constructor.Name[this.value],this.symbol=t.symbol||this.constructor.Symbol[this.suit],this.id=t.id||`${this.name} of ${this.suit}s`}copy(){return new a(this)}toObject(){return{id:this.id,name:this.name,suit:this.suit,symbol:this.symbol,value:this.value}}};var h=class a extends Array{static generate(t){t=t||{};let s=t.shouldIncludeJokers||!1,e=t.CardClass||r,o=Object.values(e.Suit).filter(i=>i!==e.Suit.None),l=Object.values(e.Value).filter(i=>i!==e.Value.Joker),u=new a;return o.forEach(i=>{l.forEach(n=>{u.push(new e({suit:i,value:n}))})}),s&&(u.push(new e({value:e.Value.Joker})),u.push(new e({value:e.Value.Joker}))),u}copy(){return this.slice().map(t=>t.copy())}random(t){return t=t||Math.random,this[Math.floor(t()*this.length)]}shuffle(t){t=t||Math.random;for(let s=0;s<this.length;s++){let e=Math.floor(t()*this.length),o=Math.floor(t()*this.length),l=this[e];this[e]=this[o],this[o]=l}return this}toObject(){return Array.from(this.map(t=>t.toObject()))}};var c={Card:r,Deck:h};globalThis.PlayingCards=c;})();
