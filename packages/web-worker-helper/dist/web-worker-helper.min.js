(()=>{function f(t,e,i){if(typeof t!="number"||isNaN(t))throw new Error("The first value passed into the `makeKey` function must be a number!");if(e&&(e instanceof Array&&(e=e.join("")),typeof e!="string"))throw new Error("The second argument passed into the `makeKey` function must be a string or array of strings!");if(i=i||Math.random,typeof i!="function")throw new Error("The third argument passed into the `makeKey` function must be a function!");let a="";e=e||"abcdef1234567890";for(let o=0;o<t;o++)a+=e[Math.floor(i()*e.length)];return a}var l=class t{static Status={CANCELLED:"CANCELLED",FAILED:"FAILED",FINISHED:"FINISHED",IN_PROGRESS:"IN_PROGRESS"};static isInWorkerContext(){return typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope}rejects=[];worker=null;signals=[];constructor(e,i){e&&(this.worker=new Worker(e,i)),t.isInWorkerContext()&&self.addEventListener("message",a=>{if(!this.signals.includes(a.data.signal))return self.postMessage({signal:a.data.signal,status:t.Status.FAILED,payload:`You tried to send a message with the signal "${a.data.signal}" to a worker, but no workers are listening for that signal!`})})}destroy(){return this.rejects.forEach(e=>e("The worker instance was terminated by the WebWorkerHelper instance.")),this.rejects=[],this.worker.terminate(),this.worker=null,this}exec(e,i,a){return new Promise((o,s)=>{try{e=e||f(8);let n=r=>{r.data.signal===e&&(r.data.status===t.Status.CANCELLED?(o(r.data.payload),console.warn(`A WebWorkerHelper process with signal "${e}" was cancelled!`),this.worker.removeEventListener("message",n),this.rejects.includes(s)&&this.rejects.splice(this.rejects.indexOf(s),1)):r.data.status===t.Status.FAILED?(s(r.data.payload),this.worker.removeEventListener("message",n),this.rejects.includes(s)&&this.rejects.splice(this.rejects.indexOf(s),1)):r.data.status===t.Status.FINISHED||!r.data.status?(o(r.data.payload),this.worker.removeEventListener("message",n),this.rejects.includes(s)&&this.rejects.splice(this.rejects.indexOf(s),1)):r.data.status===t.Status.IN_PROGRESS&&a&&a(r.data.payload))};this.worker.addEventListener("message",n),this.worker.postMessage({signal:e,payload:i}),this.rejects.push(s)}catch(n){s(n),this.rejects.includes(s)&&this.rejects.splice(this.rejects.indexOf(s),1)}})}on(e,i){if(!t.isInWorkerContext())throw new Error("The `WebWorkerHelper.on` method should only be invoked inside a web worker context!");let a=async o=>{if(o.data.signal===e)try{let s=await i(o.data.payload,n=>{self.postMessage({signal:e,status:t.Status.IN_PROGRESS,payload:n})});self.postMessage({signal:e,status:t.Status.FINISHED,payload:s})}catch(s){self.postMessage({signal:e,status:t.Status.FAILED,payload:s})}};return self.addEventListener("message",a),this.signals.push(e),()=>{this.signals.includes(e)&&this.signals.splice(this.signals.indexOf(e),1),self.removeEventListener("message",a)}}};typeof globalThis<"u"&&(globalThis.WebWorkerHelper=l);})();
